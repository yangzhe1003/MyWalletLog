import{ax as n}from"./index-c3ce6ac5.js";let a=null;const l=async t=>{try{a=await n(t.name,t.version,{upgrade(e){t.objectStoresMeta.forEach(r=>{if(!e.objectStoreNames.contains(r.store)){let s=e.createObjectStore(r.store,r.storeConfig);r.storeSchema.forEach(o=>{s.createIndex(o.key,o.value)})}})}})}catch(e){console.error("Failed to open db:",e)}},d=async(t,e)=>{try{return a==null?void 0:a.get(t,e)}catch(r){return console.error("Failed to get:",r),null}},u=async(t,e)=>{try{return a==null?void 0:a.delete(t,e)}catch(r){return console.error("Failed to remove:",r),null}},y=async(t,e)=>{try{return a==null?void 0:a.put(t,e)}catch(r){return console.error("Failed to update:",r),null}},i=async t=>{try{return await a.transaction(t,"readonly").objectStore(t).getAllKeys()}catch(e){return console.error("Failed to get all keys:",e),null}},k={name:"BitBoxTools",version:2,objectStoresMeta:[{store:"starkTransactions",storeConfig:{keyPath:"address",autoIncrement:!1},storeSchema:[{key:"address",value:"address"},{key:"data",value:"data"}]},{store:"zkTransactions",storeConfig:{keyPath:"address",autoIncrement:!1},storeSchema:[{key:"address",value:"address"},{key:"data",value:"data"}]},{store:"zkProtocol",storeConfig:{keyPath:"address",autoIncrement:!1},storeSchema:[{key:"address",value:"address"},{key:"data",value:"data"}]}]};export{i as a,k as d,d as g,l as i,u as r,y as u};
